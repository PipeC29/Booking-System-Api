Actúa como un arquitecto de software senior especializado en Java, Spring Boot y arquitectura hexagonal (puertos y adaptadores). Quiero que generes un proyecto completo llamado `booking-system-api`, con la estructura, código y documentación necesarios para subirlo a GitHub como portafolio profesional.

Requisitos obligatorios del proyecto:

---

🔹 **Propósito**:
Es una API REST para gestionar reservas de citas (ej. consultorio, coworking o barbería).

---

🔹 **Stack tecnológico**:
- Java 21
- Spring Boot 3
- Maven
- H2 database (en memoria)
- JWT (para autenticación)
- Swagger / OpenAPI 3
- Arquitectura Hexagonal (puertos y adaptadores)

---

🔹 **Arquitectura Hexagonal**:
Estructura clara con:
- `domain/`: entidades, lógica de negocio, interfaces
- `application/`: casos de uso
- `infrastructure/`: adaptadores externos (persistence, web, seguridad)
- `configuration/`: configuración Spring (beans, seguridad, Swagger)

---

🔹 **Casos de uso principales**:
1. Crear una reserva (`POST /reservations`)
2. Listar reservas (`GET /reservations`)
3. Cancelar reserva (`DELETE /reservations/{id}`)
4. Validar reglas de negocio:
   - No solapamiento de reservas (una misma persona o espacio)
   - Límite de reservas por día por usuario
   - Fechas y horas válidas (sin festivos, fuera del horario 08:00–18:00)

---

🔹 **Seguridad**:
- Autenticación con JWT
- Endpoint de login (`/auth/login`)
- Usuario hardcoded o cargado desde DB (admin, user)
- Protección de endpoints (solo usuarios autenticados pueden reservar)

---

🔹 **Documentación Swagger**:
- Swagger UI habilitado en `/swagger-ui`
- Anotaciones OpenAPI en controladores y DTOs

---

🔹 **Otros requerimientos técnicos**:
- Uso de `DTOs` para exponer datos (no las entidades directamente)
- Validaciones con `@Valid` y `@NotNull`, `@Future`, etc.
- Manejo global de errores con `@ControllerAdvice`
- Tests unitarios básicos para dominio y casos de uso

---

🔹 **README.md profesional** con:
- Descripción del proyecto
- Stack tecnológico
- Estructura de carpetas
- Instrucciones para ejecutar (con Maven o IntelliJ)
- Credenciales de ejemplo
- Captura de Swagger UI
- Endpoints de ejemplo

---

🔹 **Buenas prácticas esperadas**:
- Principios SOLID y separación de capas
- Comentarios explicativos en código relevante
- Código limpio y formateado
- Nombres de clases, paquetes y métodos coherentes

---

🔹 ⚠️ IMPORTANTE:
Entrega el código completo organizado en carpetas, como si fuera un proyecto de GitHub real y profesional. No omitas archivos ni clases clave. Incluye el `pom.xml`, `application.yml` o `.properties`, y el `README.md`.

